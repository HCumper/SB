//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.6.5
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from h:\source\home repos\sb\sblib\SB.g4 by ANTLR 4.6.5

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using System.Collections.Generic;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.6.5")]
[System.CLSCompliant(false)]
public partial class SBParser : Parser {
	public const int
		Refer=1, Implic=2, Local=3, Dimension=4, DefProc=5, DefFunc=6, If=7, Else=8, 
		Then=9, EndIf=10, Select=11, EndSelect=12, EndDef=13, On=14, For=15, Next=16, 
		To=17, EndFor=18, Step=19, Repeat=20, Exit=21, Until=22, EndRepeat=23, 
		LeftParen=24, RightParen=25, LeftBracket=26, RightBracket=27, Equal=28, 
		NotEqual=29, Less=30, LessEqual=31, Greater=32, GreaterEqual=33, Plus=34, 
		Minus=35, Multiply=36, Divide=37, Mod=38, Div=39, And=40, Or=41, Xor=42, 
		Caret=43, Not=44, Tilde=45, Instr=46, Amp=47, Question=48, Colon=49, Semi=50, 
		Comma=51, Point=52, Bang=53, Whitespace=54, Let=55, Newline=56, String=57, 
		Comment=58, ID=59, Integer=60, Real=61, Unknowntype=62, Void=63, Scalar=64;
	public const int
		RULE_program = 0, RULE_line = 1, RULE_stmtlist = 2, RULE_constexpr = 3, 
		RULE_rangeexpr = 4, RULE_stmt = 5, RULE_prochdr = 6, RULE_funchdr = 7, 
		RULE_endDef = 8, RULE_identifier = 9, RULE_parenthesizedlist = 10, RULE_unparenthesizedlist = 11, 
		RULE_lineNumber = 12, RULE_endFor = 13, RULE_separator = 14, RULE_expr = 15, 
		RULE_terminator = 16;
	public static readonly string[] ruleNames = {
		"program", "line", "stmtlist", "constexpr", "rangeexpr", "stmt", "prochdr", 
		"funchdr", "endDef", "identifier", "parenthesizedlist", "unparenthesizedlist", 
		"lineNumber", "endFor", "separator", "expr", "terminator"
	};

	private static readonly string[] _LiteralNames = {
		null, "'REFERENCE'", null, "'LOCal'", "'DIM'", "'DEFine PROCedure'", "'DEFine FuNction'", 
		"'IF'", "'ELSE'", "'THEN'", "'END IF'", "'SELect ON'", "'END SELect'", 
		"'END DEFine'", "'ON'", "'FOR'", "'NEXT'", "'TO'", "'END FOR'", "'STEP'", 
		"'REPeat'", "'EXIT'", "'UNTIL'", "'END REPeat'", "'('", "')'", "'['", 
		"']'", "'='", "'<>'", "'<'", "'<='", "'>'", "'>='", "'+'", "'-'", "'*'", 
		"'/'", "'MOD'", "'DIV'", "'AND'", "'OR'", "'XOR'", "'^'", "'NOT'", "'~'", 
		"'INSTR'", "'&'", "'?'", "':'", "';'", "','", "'.'", "'!'", null, "'LET'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "Refer", "Implic", "Local", "Dimension", "DefProc", "DefFunc", "If", 
		"Else", "Then", "EndIf", "Select", "EndSelect", "EndDef", "On", "For", 
		"Next", "To", "EndFor", "Step", "Repeat", "Exit", "Until", "EndRepeat", 
		"LeftParen", "RightParen", "LeftBracket", "RightBracket", "Equal", "NotEqual", 
		"Less", "LessEqual", "Greater", "GreaterEqual", "Plus", "Minus", "Multiply", 
		"Divide", "Mod", "Div", "And", "Or", "Xor", "Caret", "Not", "Tilde", "Instr", 
		"Amp", "Question", "Colon", "Semi", "Comma", "Point", "Bang", "Whitespace", 
		"Let", "Newline", "String", "Comment", "ID", "Integer", "Real", "Unknowntype", 
		"Void", "Scalar"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[System.Obsolete("Use Vocabulary instead.")]
	public static readonly string[] tokenNames = GenerateTokenNames(DefaultVocabulary, _SymbolicNames.Length);

	private static string[] GenerateTokenNames(IVocabulary vocabulary, int length) {
		string[] tokenNames = new string[length];
		for (int i = 0; i < tokenNames.Length; i++) {
			tokenNames[i] = vocabulary.GetLiteralName(i);
			if (tokenNames[i] == null) {
				tokenNames[i] = vocabulary.GetSymbolicName(i);
			}

			if (tokenNames[i] == null) {
				tokenNames[i] = "<INVALID>";
			}
		}

		return tokenNames;
	}

	[System.Obsolete("Use IRecognizer.Vocabulary instead.")]
	public override string[] TokenNames
	{
		get
		{
			return tokenNames;
		}
	}

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "SB.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return _serializedATN; } }

	public SBParser(ITokenStream input)
		: base(input)
	{
		_interp = new ParserATNSimulator(this,_ATN);
	}
	public partial class ProgramContext : ParserRuleContext {
		public ITerminalNode Eof() { return GetToken(SBParser.Eof, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterProgram(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitProgram(this);
		}
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(_ctx, State);
		EnterRule(_localctx, 0, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 35;
			_errHandler.Sync(this);
			_la = _input.La(1);
			do {
				{
				{
				State = 34; line();
				}
				}
				State = 37;
				_errHandler.Sync(this);
				_la = _input.La(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Refer) | (1L << Implic) | (1L << Local) | (1L << Dimension) | (1L << DefProc) | (1L << DefFunc) | (1L << If) | (1L << Select) | (1L << On) | (1L << For) | (1L << Next) | (1L << Repeat) | (1L << Exit) | (1L << Newline) | (1L << ID) | (1L << Integer))) != 0) );
			State = 39; Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineContext : ParserRuleContext {
		public ITerminalNode Newline() { return GetToken(SBParser.Newline, 0); }
		public LineNumberContext lineNumber() {
			return GetRuleContext<LineNumberContext>(0);
		}
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public ITerminalNode Colon() { return GetToken(SBParser.Colon, 0); }
		public LineContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_line; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterLine(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitLine(this);
		}
	}

	[RuleVersion(0)]
	public LineContext line() {
		LineContext _localctx = new LineContext(_ctx, State);
		EnterRule(_localctx, 2, RULE_line);
		int _la;
		try {
			State = 52;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,3,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 42;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 41; lineNumber();
					}
				}

				State = 45;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Refer) | (1L << Implic) | (1L << Local) | (1L << Dimension) | (1L << DefProc) | (1L << DefFunc) | (1L << If) | (1L << Select) | (1L << On) | (1L << For) | (1L << Next) | (1L << Repeat) | (1L << Exit) | (1L << ID))) != 0)) {
					{
					State = 44; stmtlist();
					}
				}

				State = 47; Match(Newline);
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; lineNumber();
				State = 49; Match(Colon);
				State = 50; Match(Newline);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtlistContext : ParserRuleContext {
		public StmtContext[] stmt() {
			return GetRuleContexts<StmtContext>();
		}
		public StmtContext stmt(int i) {
			return GetRuleContext<StmtContext>(i);
		}
		public StmtlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmtlist; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterStmtlist(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitStmtlist(this);
		}
	}

	[RuleVersion(0)]
	public StmtlistContext stmtlist() {
		StmtlistContext _localctx = new StmtlistContext(_ctx, State);
		EnterRule(_localctx, 4, RULE_stmtlist);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 54; stmt();
			State = 61;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 55; Match(Colon);
					State = 57;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Refer) | (1L << Implic) | (1L << Local) | (1L << Dimension) | (1L << DefProc) | (1L << DefFunc) | (1L << If) | (1L << Select) | (1L << On) | (1L << For) | (1L << Next) | (1L << Repeat) | (1L << Exit) | (1L << ID))) != 0)) {
						{
						State = 56; stmt();
						}
					}

					}
					} 
				}
				State = 63;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,5,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ConstexprContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(SBParser.Integer, 0); }
		public ITerminalNode Real() { return GetToken(SBParser.Real, 0); }
		public ITerminalNode String() { return GetToken(SBParser.String, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public ConstexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_constexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterConstexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitConstexpr(this);
		}
	}

	[RuleVersion(0)]
	public ConstexprContext constexpr() {
		ConstexprContext _localctx = new ConstexprContext(_ctx, State);
		EnterRule(_localctx, 6, RULE_constexpr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 64;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << String) | (1L << ID) | (1L << Integer) | (1L << Real))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RangeexprContext : ParserRuleContext {
		public ConstexprContext[] constexpr() {
			return GetRuleContexts<ConstexprContext>();
		}
		public ConstexprContext constexpr(int i) {
			return GetRuleContext<ConstexprContext>(i);
		}
		public ITerminalNode To() { return GetToken(SBParser.To, 0); }
		public RangeexprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rangeexpr; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterRangeexpr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitRangeexpr(this);
		}
	}

	[RuleVersion(0)]
	public RangeexprContext rangeexpr() {
		RangeexprContext _localctx = new RangeexprContext(_ctx, State);
		EnterRule(_localctx, 8, RULE_rangeexpr);
		try {
			State = 71;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,6,_ctx) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 66; constexpr();
				State = 67; Match(To);
				State = 68; constexpr();
				}
				break;

			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 70; constexpr();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StmtContext : ParserRuleContext {
		public StmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_stmt; } }
	 
		public StmtContext() { }
		public virtual void CopyFrom(StmtContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class DimContext : StmtContext {
		public ITerminalNode Dimension() { return GetToken(SBParser.Dimension, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public DimContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterDim(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitDim(this);
		}
	}
	public partial class LocContext : StmtContext {
		public ITerminalNode Local() { return GetToken(SBParser.Local, 0); }
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public LocContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterLoc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitLoc(this);
		}
	}
	public partial class ImplicitContext : StmtContext {
		public ITerminalNode Implic() { return GetToken(SBParser.Implic, 0); }
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public ImplicitContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterImplicit(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitImplicit(this);
		}
	}
	public partial class ReferenceContext : StmtContext {
		public ITerminalNode Refer() { return GetToken(SBParser.Refer, 0); }
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public ReferenceContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterReference(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitReference(this);
		}
	}
	public partial class ProcContext : StmtContext {
		public ProchdrContext prochdr() {
			return GetRuleContext<ProchdrContext>(0);
		}
		public EndDefContext endDef() {
			return GetRuleContext<EndDefContext>(0);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SBParser.Integer, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public ProcContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterProc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitProc(this);
		}
	}
	public partial class FuncContext : StmtContext {
		public FunchdrContext funchdr() {
			return GetRuleContext<FunchdrContext>(0);
		}
		public EndDefContext endDef() {
			return GetRuleContext<EndDefContext>(0);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SBParser.Integer, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public FuncContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterFunc(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitFunc(this);
		}
	}
	public partial class LongforContext : StmtContext {
		public ITerminalNode For() { return GetToken(SBParser.For, 0); }
		public ITerminalNode[] ID() { return GetTokens(SBParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SBParser.ID, i);
		}
		public ITerminalNode Equal() { return GetToken(SBParser.Equal, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode To() { return GetToken(SBParser.To, 0); }
		public ITerminalNode Newline() { return GetToken(SBParser.Newline, 0); }
		public EndForContext endFor() {
			return GetRuleContext<EndForContext>(0);
		}
		public ITerminalNode Step() { return GetToken(SBParser.Step, 0); }
		public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public LineNumberContext lineNumber() {
			return GetRuleContext<LineNumberContext>(0);
		}
		public LongforContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterLongfor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitLongfor(this);
		}
	}
	public partial class ShortforContext : StmtContext {
		public ITerminalNode For() { return GetToken(SBParser.For, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public ITerminalNode Equal() { return GetToken(SBParser.Equal, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode To() { return GetToken(SBParser.To, 0); }
		public ITerminalNode Colon() { return GetToken(SBParser.Colon, 0); }
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public ShortforContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterShortfor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitShortfor(this);
		}
	}
	public partial class ShortrepeatContext : StmtContext {
		public ITerminalNode Repeat() { return GetToken(SBParser.Repeat, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public ITerminalNode Colon() { return GetToken(SBParser.Colon, 0); }
		public StmtlistContext stmtlist() {
			return GetRuleContext<StmtlistContext>(0);
		}
		public ShortrepeatContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterShortrepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitShortrepeat(this);
		}
	}
	public partial class LongrepeatContext : StmtContext {
		public ITerminalNode Repeat() { return GetToken(SBParser.Repeat, 0); }
		public ITerminalNode[] ID() { return GetTokens(SBParser.ID); }
		public ITerminalNode ID(int i) {
			return GetToken(SBParser.ID, i);
		}
		public ITerminalNode Newline() { return GetToken(SBParser.Newline, 0); }
		public ITerminalNode EndRepeat() { return GetToken(SBParser.EndRepeat, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SBParser.Integer, 0); }
		public LongrepeatContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterLongrepeat(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitLongrepeat(this);
		}
	}
	public partial class ShortifContext : StmtContext {
		public ITerminalNode If() { return GetToken(SBParser.If, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public StmtlistContext[] stmtlist() {
			return GetRuleContexts<StmtlistContext>();
		}
		public StmtlistContext stmtlist(int i) {
			return GetRuleContext<StmtlistContext>(i);
		}
		public ITerminalNode Then() { return GetToken(SBParser.Then, 0); }
		public ITerminalNode[] Colon() { return GetTokens(SBParser.Colon); }
		public ITerminalNode Colon(int i) {
			return GetToken(SBParser.Colon, i);
		}
		public ITerminalNode Else() { return GetToken(SBParser.Else, 0); }
		public ShortifContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterShortif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitShortif(this);
		}
	}
	public partial class LongifContext : StmtContext {
		public ITerminalNode If() { return GetToken(SBParser.If, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SBParser.Newline, 0); }
		public ITerminalNode EndIf() { return GetToken(SBParser.EndIf, 0); }
		public ITerminalNode Then() { return GetToken(SBParser.Then, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Else() { return GetToken(SBParser.Else, 0); }
		public ITerminalNode[] Integer() { return GetTokens(SBParser.Integer); }
		public ITerminalNode Integer(int i) {
			return GetToken(SBParser.Integer, i);
		}
		public LongifContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterLongif(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitLongif(this);
		}
	}
	public partial class LongselectContext : StmtContext {
		public ITerminalNode Select() { return GetToken(SBParser.Select, 0); }
		public ConstexprContext constexpr() {
			return GetRuleContext<ConstexprContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SBParser.Newline, 0); }
		public ITerminalNode EndSelect() { return GetToken(SBParser.EndSelect, 0); }
		public LineContext[] line() {
			return GetRuleContexts<LineContext>();
		}
		public LineContext line(int i) {
			return GetRuleContext<LineContext>(i);
		}
		public ITerminalNode Integer() { return GetToken(SBParser.Integer, 0); }
		public LongselectContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterLongselect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitLongselect(this);
		}
	}
	public partial class OnselectContext : StmtContext {
		public ITerminalNode On() { return GetToken(SBParser.On, 0); }
		public ITerminalNode Equal() { return GetToken(SBParser.Equal, 0); }
		public RangeexprContext rangeexpr() {
			return GetRuleContext<RangeexprContext>(0);
		}
		public ConstexprContext constexpr() {
			return GetRuleContext<ConstexprContext>(0);
		}
		public OnselectContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterOnselect(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitOnselect(this);
		}
	}
	public partial class NextstmtContext : StmtContext {
		public ITerminalNode Next() { return GetToken(SBParser.Next, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public NextstmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterNextstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitNextstmt(this);
		}
	}
	public partial class ExitstmtContext : StmtContext {
		public ITerminalNode Exit() { return GetToken(SBParser.Exit, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public ExitstmtContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterExitstmt(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitExitstmt(this);
		}
	}
	public partial class AssignmentContext : StmtContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Equal() { return GetToken(SBParser.Equal, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public AssignmentContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterAssignment(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitAssignment(this);
		}
	}
	public partial class IdentifierOnlyContext : StmtContext {
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public IdentifierOnlyContext(StmtContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterIdentifierOnly(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitIdentifierOnly(this);
		}
	}

	[RuleVersion(0)]
	public StmtContext stmt() {
		StmtContext _localctx = new StmtContext(_ctx, State);
		EnterRule(_localctx, 10, RULE_stmt);
		int _la;
		try {
			int _alt;
			State = 228;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,29,_ctx) ) {
			case 1:
				_localctx = new DimContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 73; Match(Dimension);
				State = 74; Match(ID);
				State = 75; parenthesizedlist();
				}
				break;

			case 2:
				_localctx = new LocContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 76; Match(Local);
				State = 77; unparenthesizedlist();
				}
				break;

			case 3:
				_localctx = new ImplicitContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 78; Match(Implic);
				State = 79; unparenthesizedlist();
				}
				break;

			case 4:
				_localctx = new ReferenceContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 80; Match(Refer);
				State = 81; unparenthesizedlist();
				}
				break;

			case 5:
				_localctx = new ProcContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 82; prochdr();
				State = 86;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 83; line();
						}
						} 
					}
					State = 88;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,7,_ctx);
				}
				State = 90;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 89; Match(Integer);
					}
				}

				State = 92; endDef();
				State = 94;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 93; Match(ID);
					}
				}

				}
				break;

			case 6:
				_localctx = new FuncContext(_localctx);
				EnterOuterAlt(_localctx, 6);
				{
				State = 96; funchdr();
				State = 100;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 97; line();
						}
						} 
					}
					State = 102;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,10,_ctx);
				}
				State = 104;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 103; Match(Integer);
					}
				}

				State = 106; endDef();
				State = 108;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 107; Match(ID);
					}
				}

				}
				break;

			case 7:
				_localctx = new LongforContext(_localctx);
				EnterOuterAlt(_localctx, 7);
				{
				State = 110; Match(For);
				State = 111; Match(ID);
				State = 112; Match(Equal);
				State = 113; expr(0);
				State = 114; Match(To);
				State = 115; expr(0);
				State = 118;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Step) {
					{
					State = 116; Match(Step);
					State = 117; terminator();
					}
				}

				State = 120; Match(Newline);
				State = 124;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 121; line();
						}
						} 
					}
					State = 126;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,14,_ctx);
				}
				State = 128;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 127; lineNumber();
					}
				}

				State = 130; endFor();
				State = 132;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 131; Match(ID);
					}
				}

				}
				break;

			case 8:
				_localctx = new ShortforContext(_localctx);
				EnterOuterAlt(_localctx, 8);
				{
				State = 134; Match(For);
				State = 135; Match(ID);
				State = 136; Match(Equal);
				State = 137; expr(0);
				State = 138; Match(To);
				State = 139; expr(0);
				State = 140; Match(Colon);
				State = 141; stmtlist();
				}
				break;

			case 9:
				_localctx = new ShortrepeatContext(_localctx);
				EnterOuterAlt(_localctx, 9);
				{
				State = 143; Match(Repeat);
				State = 144; Match(ID);
				State = 145; Match(Colon);
				State = 146; stmtlist();
				}
				break;

			case 10:
				_localctx = new LongrepeatContext(_localctx);
				EnterOuterAlt(_localctx, 10);
				{
				State = 147; Match(Repeat);
				State = 148; Match(ID);
				State = 149; Match(Newline);
				State = 153;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 150; line();
						}
						} 
					}
					State = 155;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,17,_ctx);
				}
				State = 157;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 156; Match(Integer);
					}
				}

				{
				State = 159; Match(EndRepeat);
				State = 161;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==ID) {
					{
					State = 160; Match(ID);
					}
				}

				}
				}
				break;

			case 11:
				_localctx = new ShortifContext(_localctx);
				EnterOuterAlt(_localctx, 11);
				{
				State = 163; Match(If);
				State = 164; expr(0);
				State = 165;
				_la = _input.La(1);
				if ( !(_la==Then || _la==Colon) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 166; stmtlist();
				State = 171;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,20,_ctx) ) {
				case 1:
					{
					State = 167; Match(Colon);
					State = 168; Match(Else);
					State = 169; Match(Colon);
					State = 170; stmtlist();
					}
					break;
				}
				}
				break;

			case 12:
				_localctx = new LongifContext(_localctx);
				EnterOuterAlt(_localctx, 12);
				{
				State = 173; Match(If);
				State = 174; expr(0);
				State = 176;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Then) {
					{
					State = 175; Match(Then);
					}
				}

				State = 178; Match(Newline);
				State = 180;
				_errHandler.Sync(this);
				_alt = 1;
				do {
					switch (_alt) {
					case 1:
						{
						{
						State = 179; line();
						}
						}
						break;
					default:
						throw new NoViableAltException(this);
					}
					State = 182;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,22,_ctx);
				} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
				State = 193;
				_errHandler.Sync(this);
				switch ( Interpreter.AdaptivePredict(_input,25,_ctx) ) {
				case 1:
					{
					State = 185;
					_errHandler.Sync(this);
					_la = _input.La(1);
					if (_la==Integer) {
						{
						State = 184; Match(Integer);
						}
					}

					State = 187; Match(Else);
					State = 189;
					_errHandler.Sync(this);
					_alt = 1;
					do {
						switch (_alt) {
						case 1:
							{
							{
							State = 188; line();
							}
							}
							break;
						default:
							throw new NoViableAltException(this);
						}
						State = 191;
						_errHandler.Sync(this);
						_alt = Interpreter.AdaptivePredict(_input,24,_ctx);
					} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber );
					}
					break;
				}
				State = 196;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 195; Match(Integer);
					}
				}

				State = 198; Match(EndIf);
				}
				break;

			case 13:
				_localctx = new LongselectContext(_localctx);
				EnterOuterAlt(_localctx, 13);
				{
				State = 200; Match(Select);
				State = 201; constexpr();
				State = 202; Match(Newline);
				State = 206;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
				while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
					if ( _alt==1 ) {
						{
						{
						State = 203; line();
						}
						} 
					}
					State = 208;
					_errHandler.Sync(this);
					_alt = Interpreter.AdaptivePredict(_input,27,_ctx);
				}
				State = 210;
				_errHandler.Sync(this);
				_la = _input.La(1);
				if (_la==Integer) {
					{
					State = 209; Match(Integer);
					}
				}

				State = 212; Match(EndSelect);
				}
				break;

			case 14:
				_localctx = new OnselectContext(_localctx);
				EnterOuterAlt(_localctx, 14);
				{
				State = 214; Match(On);
				{
				State = 215; constexpr();
				}
				State = 216; Match(Equal);
				State = 217; rangeexpr();
				}
				break;

			case 15:
				_localctx = new NextstmtContext(_localctx);
				EnterOuterAlt(_localctx, 15);
				{
				State = 219; Match(Next);
				State = 220; Match(ID);
				}
				break;

			case 16:
				_localctx = new ExitstmtContext(_localctx);
				EnterOuterAlt(_localctx, 16);
				{
				State = 221; Match(Exit);
				State = 222; Match(ID);
				}
				break;

			case 17:
				_localctx = new AssignmentContext(_localctx);
				EnterOuterAlt(_localctx, 17);
				{
				State = 223; identifier();
				State = 224; Match(Equal);
				State = 225; expr(0);
				}
				break;

			case 18:
				_localctx = new IdentifierOnlyContext(_localctx);
				EnterOuterAlt(_localctx, 18);
				{
				State = 227; identifier();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProchdrContext : ParserRuleContext {
		public ProchdrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_prochdr; } }
	 
		public ProchdrContext() { }
		public virtual void CopyFrom(ProchdrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ProcheaderContext : ProchdrContext {
		public ITerminalNode DefProc() { return GetToken(SBParser.DefProc, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SBParser.Newline, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public ProcheaderContext(ProchdrContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterProcheader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitProcheader(this);
		}
	}

	[RuleVersion(0)]
	public ProchdrContext prochdr() {
		ProchdrContext _localctx = new ProchdrContext(_ctx, State);
		EnterRule(_localctx, 12, RULE_prochdr);
		int _la;
		try {
			_localctx = new ProcheaderContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 230; Match(DefProc);
			State = 231; identifier();
			State = 233;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LeftParen) {
				{
				State = 232; parenthesizedlist();
				}
			}

			State = 235; Match(Newline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FunchdrContext : ParserRuleContext {
		public FunchdrContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funchdr; } }
	 
		public FunchdrContext() { }
		public virtual void CopyFrom(FunchdrContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class FuncheaderContext : FunchdrContext {
		public ITerminalNode DefFunc() { return GetToken(SBParser.DefFunc, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public ITerminalNode Newline() { return GetToken(SBParser.Newline, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public FuncheaderContext(FunchdrContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterFuncheader(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitFuncheader(this);
		}
	}

	[RuleVersion(0)]
	public FunchdrContext funchdr() {
		FunchdrContext _localctx = new FunchdrContext(_ctx, State);
		EnterRule(_localctx, 14, RULE_funchdr);
		int _la;
		try {
			_localctx = new FuncheaderContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 237; Match(DefFunc);
			State = 238; identifier();
			State = 240;
			_errHandler.Sync(this);
			_la = _input.La(1);
			if (_la==LeftParen) {
				{
				State = 239; parenthesizedlist();
				}
			}

			State = 242; Match(Newline);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndDefContext : ParserRuleContext {
		public ITerminalNode EndDef() { return GetToken(SBParser.EndDef, 0); }
		public EndDefContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endDef; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterEndDef(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitEndDef(this);
		}
	}

	[RuleVersion(0)]
	public EndDefContext endDef() {
		EndDefContext _localctx = new EndDefContext(_ctx, State);
		EnterRule(_localctx, 16, RULE_endDef);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 244; Match(EndDef);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class IdentifierContext : ParserRuleContext {
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public ParenthesizedlistContext parenthesizedlist() {
			return GetRuleContext<ParenthesizedlistContext>(0);
		}
		public UnparenthesizedlistContext unparenthesizedlist() {
			return GetRuleContext<UnparenthesizedlistContext>(0);
		}
		public IdentifierContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_identifier; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterIdentifier(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitIdentifier(this);
		}
	}

	[RuleVersion(0)]
	public IdentifierContext identifier() {
		IdentifierContext _localctx = new IdentifierContext(_ctx, State);
		EnterRule(_localctx, 18, RULE_identifier);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 246; Match(ID);
			State = 249;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,32,_ctx) ) {
			case 1:
				{
				State = 247; parenthesizedlist();
				}
				break;

			case 2:
				{
				State = 248; unparenthesizedlist();
				}
				break;
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParenthesizedlistContext : ParserRuleContext {
		public ParenthesizedlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_parenthesizedlist; } }
	 
		public ParenthesizedlistContext() { }
		public virtual void CopyFrom(ParenthesizedlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedlContext : ParenthesizedlistContext {
		public ITerminalNode LeftParen() { return GetToken(SBParser.LeftParen, 0); }
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode RightParen() { return GetToken(SBParser.RightParen, 0); }
		public SeparatorContext[] separator() {
			return GetRuleContexts<SeparatorContext>();
		}
		public SeparatorContext separator(int i) {
			return GetRuleContext<SeparatorContext>(i);
		}
		public ParenthesizedlContext(ParenthesizedlistContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterParenthesizedl(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitParenthesizedl(this);
		}
	}

	[RuleVersion(0)]
	public ParenthesizedlistContext parenthesizedlist() {
		ParenthesizedlistContext _localctx = new ParenthesizedlistContext(_ctx, State);
		EnterRule(_localctx, 20, RULE_parenthesizedlist);
		int _la;
		try {
			_localctx = new ParenthesizedlContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 251; Match(LeftParen);
			State = 252; expr(0);
			State = 258;
			_errHandler.Sync(this);
			_la = _input.La(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << To) | (1L << Semi) | (1L << Comma) | (1L << Bang))) != 0)) {
				{
				{
				State = 253; separator();
				State = 254; expr(0);
				}
				}
				State = 260;
				_errHandler.Sync(this);
				_la = _input.La(1);
			}
			State = 261; Match(RightParen);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class UnparenthesizedlistContext : ParserRuleContext {
		public UnparenthesizedlistContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_unparenthesizedlist; } }
	 
		public UnparenthesizedlistContext() { }
		public virtual void CopyFrom(UnparenthesizedlistContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class UnparenthesizedContext : UnparenthesizedlistContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public SeparatorContext[] separator() {
			return GetRuleContexts<SeparatorContext>();
		}
		public SeparatorContext separator(int i) {
			return GetRuleContext<SeparatorContext>(i);
		}
		public UnparenthesizedContext(UnparenthesizedlistContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterUnparenthesized(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitUnparenthesized(this);
		}
	}

	[RuleVersion(0)]
	public UnparenthesizedlistContext unparenthesizedlist() {
		UnparenthesizedlistContext _localctx = new UnparenthesizedlistContext(_ctx, State);
		EnterRule(_localctx, 22, RULE_unparenthesizedlist);
		try {
			int _alt;
			_localctx = new UnparenthesizedContext(_localctx);
			EnterOuterAlt(_localctx, 1);
			{
			State = 263; expr(0);
			State = 269;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					{
					{
					State = 264; separator();
					State = 265; expr(0);
					}
					} 
				}
				State = 271;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,34,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LineNumberContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(SBParser.Integer, 0); }
		public LineNumberContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lineNumber; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterLineNumber(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitLineNumber(this);
		}
	}

	[RuleVersion(0)]
	public LineNumberContext lineNumber() {
		LineNumberContext _localctx = new LineNumberContext(_ctx, State);
		EnterRule(_localctx, 24, RULE_lineNumber);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 272; Match(Integer);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class EndForContext : ParserRuleContext {
		public ITerminalNode EndFor() { return GetToken(SBParser.EndFor, 0); }
		public EndForContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_endFor; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterEndFor(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitEndFor(this);
		}
	}

	[RuleVersion(0)]
	public EndForContext endFor() {
		EndForContext _localctx = new EndForContext(_ctx, State);
		EnterRule(_localctx, 26, RULE_endFor);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 274; Match(EndFor);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SeparatorContext : ParserRuleContext {
		public ITerminalNode Comma() { return GetToken(SBParser.Comma, 0); }
		public ITerminalNode Bang() { return GetToken(SBParser.Bang, 0); }
		public ITerminalNode Semi() { return GetToken(SBParser.Semi, 0); }
		public ITerminalNode To() { return GetToken(SBParser.To, 0); }
		public SeparatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_separator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterSeparator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitSeparator(this);
		}
	}

	[RuleVersion(0)]
	public SeparatorContext separator() {
		SeparatorContext _localctx = new SeparatorContext(_ctx, State);
		EnterRule(_localctx, 28, RULE_separator);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 276;
			_la = _input.La(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << To) | (1L << Semi) | (1L << Comma) | (1L << Bang))) != 0)) ) {
			_errHandler.RecoverInline(this);
			} else {
				if (_input.La(1) == TokenConstants.Eof) {
					matchedEOF = true;
				}

				_errHandler.ReportMatch(this);
				Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExprContext : ParserRuleContext {
		public ExprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr; } }
	 
		public ExprContext() { }
		public virtual void CopyFrom(ExprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ParenthesizedContext : ExprContext {
		public ITerminalNode LeftParen() { return GetToken(SBParser.LeftParen, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode RightParen() { return GetToken(SBParser.RightParen, 0); }
		public ParenthesizedContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterParenthesized(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitParenthesized(this);
		}
	}
	public partial class UnaryAdditiveContext : ExprContext {
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode Plus() { return GetToken(SBParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(SBParser.Minus, 0); }
		public UnaryAdditiveContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterUnaryAdditive(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitUnaryAdditive(this);
		}
	}
	public partial class BinaryContext : ExprContext {
		public ExprContext[] expr() {
			return GetRuleContexts<ExprContext>();
		}
		public ExprContext expr(int i) {
			return GetRuleContext<ExprContext>(i);
		}
		public ITerminalNode Amp() { return GetToken(SBParser.Amp, 0); }
		public ITerminalNode Caret() { return GetToken(SBParser.Caret, 0); }
		public ITerminalNode Multiply() { return GetToken(SBParser.Multiply, 0); }
		public ITerminalNode Divide() { return GetToken(SBParser.Divide, 0); }
		public ITerminalNode Mod() { return GetToken(SBParser.Mod, 0); }
		public ITerminalNode Div() { return GetToken(SBParser.Div, 0); }
		public ITerminalNode Plus() { return GetToken(SBParser.Plus, 0); }
		public ITerminalNode Minus() { return GetToken(SBParser.Minus, 0); }
		public ITerminalNode Equal() { return GetToken(SBParser.Equal, 0); }
		public ITerminalNode NotEqual() { return GetToken(SBParser.NotEqual, 0); }
		public ITerminalNode Less() { return GetToken(SBParser.Less, 0); }
		public ITerminalNode LessEqual() { return GetToken(SBParser.LessEqual, 0); }
		public ITerminalNode Greater() { return GetToken(SBParser.Greater, 0); }
		public ITerminalNode GreaterEqual() { return GetToken(SBParser.GreaterEqual, 0); }
		public ITerminalNode And() { return GetToken(SBParser.And, 0); }
		public ITerminalNode Or() { return GetToken(SBParser.Or, 0); }
		public ITerminalNode Xor() { return GetToken(SBParser.Xor, 0); }
		public BinaryContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterBinary(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitBinary(this);
		}
	}
	public partial class InstrContext : ExprContext {
		public ITerminalNode Instr() { return GetToken(SBParser.Instr, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public ITerminalNode String() { return GetToken(SBParser.String, 0); }
		public ITerminalNode ID() { return GetToken(SBParser.ID, 0); }
		public InstrContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterInstr(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitInstr(this);
		}
	}
	public partial class NotContext : ExprContext {
		public ITerminalNode Not() { return GetToken(SBParser.Not, 0); }
		public ExprContext expr() {
			return GetRuleContext<ExprContext>(0);
		}
		public NotContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterNot(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitNot(this);
		}
	}
	public partial class TermContext : ExprContext {
		public TerminatorContext terminator() {
			return GetRuleContext<TerminatorContext>(0);
		}
		public TermContext(ExprContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterTerm(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitTerm(this);
		}
	}

	[RuleVersion(0)]
	public ExprContext expr() {
		return expr(0);
	}

	private ExprContext expr(int _p) {
		ParserRuleContext _parentctx = _ctx;
		int _parentState = State;
		ExprContext _localctx = new ExprContext(_ctx, _parentState);
		ExprContext _prevctx = _localctx;
		int _startState = 30;
		EnterRecursionRule(_localctx, 30, RULE_expr, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 291;
			_errHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(_input,35,_ctx) ) {
			case 1:
				{
				_localctx = new ParenthesizedContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;

				State = 279; Match(LeftParen);
				State = 280; expr(0);
				State = 281; Match(RightParen);
				}
				break;

			case 2:
				{
				_localctx = new UnaryAdditiveContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 283;
				_la = _input.La(1);
				if ( !(_la==Plus || _la==Minus) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 284; expr(11);
				}
				break;

			case 3:
				{
				_localctx = new InstrContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 285;
				_la = _input.La(1);
				if ( !(_la==String || _la==ID) ) {
				_errHandler.RecoverInline(this);
				} else {
					if (_input.La(1) == TokenConstants.Eof) {
						matchedEOF = true;
					}

					_errHandler.ReportMatch(this);
					Consume();
				}
				State = 286; Match(Instr);
				State = 287; expr(9);
				}
				break;

			case 4:
				{
				_localctx = new NotContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 288; Match(Not);
				State = 289; expr(4);
				}
				break;

			case 5:
				{
				_localctx = new TermContext(_localctx);
				_ctx = _localctx;
				_prevctx = _localctx;
				State = 290; terminator();
				}
				break;
			}
			_ctx.stop = _input.Lt(-1);
			State = 316;
			_errHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.InvalidAltNumber ) {
				if ( _alt==1 ) {
					if ( _parseListeners!=null ) TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					State = 314;
					_errHandler.Sync(this);
					switch ( Interpreter.AdaptivePredict(_input,36,_ctx) ) {
					case 1:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 293;
						if (!(Precpred(_ctx, 10))) throw new FailedPredicateException(this, "Precpred(_ctx, 10)");
						State = 294; Match(Amp);
						State = 295; expr(11);
						}
						break;

					case 2:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 296;
						if (!(Precpred(_ctx, 8))) throw new FailedPredicateException(this, "Precpred(_ctx, 8)");
						State = 297; Match(Caret);
						State = 298; expr(8);
						}
						break;

					case 3:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 299;
						if (!(Precpred(_ctx, 7))) throw new FailedPredicateException(this, "Precpred(_ctx, 7)");
						State = 300;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Multiply) | (1L << Divide) | (1L << Mod) | (1L << Div))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 301; expr(8);
						}
						break;

					case 4:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 302;
						if (!(Precpred(_ctx, 6))) throw new FailedPredicateException(this, "Precpred(_ctx, 6)");
						State = 303;
						_la = _input.La(1);
						if ( !(_la==Plus || _la==Minus) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 304; expr(7);
						}
						break;

					case 5:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 305;
						if (!(Precpred(_ctx, 5))) throw new FailedPredicateException(this, "Precpred(_ctx, 5)");
						State = 306;
						_la = _input.La(1);
						if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << NotEqual) | (1L << Less) | (1L << LessEqual) | (1L << Greater) | (1L << GreaterEqual))) != 0)) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 307; expr(6);
						}
						break;

					case 6:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 308;
						if (!(Precpred(_ctx, 3))) throw new FailedPredicateException(this, "Precpred(_ctx, 3)");
						State = 309; Match(And);
						State = 310; expr(4);
						}
						break;

					case 7:
						{
						_localctx = new BinaryContext(new ExprContext(_parentctx, _parentState));
						PushNewRecursionContext(_localctx, _startState, RULE_expr);
						State = 311;
						if (!(Precpred(_ctx, 2))) throw new FailedPredicateException(this, "Precpred(_ctx, 2)");
						State = 312;
						_la = _input.La(1);
						if ( !(_la==Or || _la==Xor) ) {
						_errHandler.RecoverInline(this);
						} else {
							if (_input.La(1) == TokenConstants.Eof) {
								matchedEOF = true;
							}

							_errHandler.ReportMatch(this);
							Consume();
						}
						State = 313; expr(3);
						}
						break;
					}
					} 
				}
				State = 318;
				_errHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(_input,37,_ctx);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class TerminatorContext : ParserRuleContext {
		public ITerminalNode Integer() { return GetToken(SBParser.Integer, 0); }
		public ITerminalNode String() { return GetToken(SBParser.String, 0); }
		public ITerminalNode Real() { return GetToken(SBParser.Real, 0); }
		public IdentifierContext identifier() {
			return GetRuleContext<IdentifierContext>(0);
		}
		public TerminatorContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_terminator; } }
		public override void EnterRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.EnterTerminator(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ISBListener typedListener = listener as ISBListener;
			if (typedListener != null) typedListener.ExitTerminator(this);
		}
	}

	[RuleVersion(0)]
	public TerminatorContext terminator() {
		TerminatorContext _localctx = new TerminatorContext(_ctx, State);
		EnterRule(_localctx, 32, RULE_terminator);
		try {
			State = 323;
			_errHandler.Sync(this);
			switch (_input.La(1)) {
			case Integer:
				EnterOuterAlt(_localctx, 1);
				{
				State = 319; Match(Integer);
				}
				break;
			case String:
				EnterOuterAlt(_localctx, 2);
				{
				State = 320; Match(String);
				}
				break;
			case Real:
				EnterOuterAlt(_localctx, 3);
				{
				State = 321; Match(Real);
				}
				break;
			case ID:
				EnterOuterAlt(_localctx, 4);
				{
				State = 322; identifier();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			_errHandler.ReportError(this, re);
			_errHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 15: return expr_sempred((ExprContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expr_sempred(ExprContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(_ctx, 10);

		case 1: return Precpred(_ctx, 8);

		case 2: return Precpred(_ctx, 7);

		case 3: return Precpred(_ctx, 6);

		case 4: return Precpred(_ctx, 5);

		case 5: return Precpred(_ctx, 3);

		case 6: return Precpred(_ctx, 2);
		}
		return true;
	}

	public static readonly string _serializedATN =
		"\x3\xAF6F\x8320\x479D\xB75C\x4880\x1605\x191C\xAB37\x3\x42\x148\x4\x2"+
		"\t\x2\x4\x3\t\x3\x4\x4\t\x4\x4\x5\t\x5\x4\x6\t\x6\x4\a\t\a\x4\b\t\b\x4"+
		"\t\t\t\x4\n\t\n\x4\v\t\v\x4\f\t\f\x4\r\t\r\x4\xE\t\xE\x4\xF\t\xF\x4\x10"+
		"\t\x10\x4\x11\t\x11\x4\x12\t\x12\x3\x2\x6\x2&\n\x2\r\x2\xE\x2\'\x3\x2"+
		"\x3\x2\x3\x3\x5\x3-\n\x3\x3\x3\x5\x3\x30\n\x3\x3\x3\x3\x3\x3\x3\x3\x3"+
		"\x3\x3\x5\x3\x37\n\x3\x3\x4\x3\x4\x3\x4\x5\x4<\n\x4\a\x4>\n\x4\f\x4\xE"+
		"\x4\x41\v\x4\x3\x5\x3\x5\x3\x6\x3\x6\x3\x6\x3\x6\x3\x6\x5\x6J\n\x6\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\aW\n\a\f\a\xE\a"+
		"Z\v\a\x3\a\x5\a]\n\a\x3\a\x3\a\x5\a\x61\n\a\x3\a\x3\a\a\a\x65\n\a\f\a"+
		"\xE\ah\v\a\x3\a\x5\ak\n\a\x3\a\x3\a\x5\ao\n\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x5\ay\n\a\x3\a\x3\a\a\a}\n\a\f\a\xE\a\x80\v\a\x3\a\x5"+
		"\a\x83\n\a\x3\a\x3\a\x5\a\x87\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3"+
		"\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a\a\x9A\n\a\f\a\xE\a\x9D"+
		"\v\a\x3\a\x5\a\xA0\n\a\x3\a\x3\a\x5\a\xA4\n\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x5\a\xAE\n\a\x3\a\x3\a\x3\a\x5\a\xB3\n\a\x3\a\x3\a\x6"+
		"\a\xB7\n\a\r\a\xE\a\xB8\x3\a\x5\a\xBC\n\a\x3\a\x3\a\x6\a\xC0\n\a\r\a\xE"+
		"\a\xC1\x5\a\xC4\n\a\x3\a\x5\a\xC7\n\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\a"+
		"\a\xCF\n\a\f\a\xE\a\xD2\v\a\x3\a\x5\a\xD5\n\a\x3\a\x3\a\x3\a\x3\a\x3\a"+
		"\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x3\a\x5\a\xE7\n\a\x3"+
		"\b\x3\b\x3\b\x5\b\xEC\n\b\x3\b\x3\b\x3\t\x3\t\x3\t\x5\t\xF3\n\t\x3\t\x3"+
		"\t\x3\n\x3\n\x3\v\x3\v\x3\v\x5\v\xFC\n\v\x3\f\x3\f\x3\f\x3\f\x3\f\a\f"+
		"\x103\n\f\f\f\xE\f\x106\v\f\x3\f\x3\f\x3\r\x3\r\x3\r\x3\r\a\r\x10E\n\r"+
		"\f\r\xE\r\x111\v\r\x3\xE\x3\xE\x3\xF\x3\xF\x3\x10\x3\x10\x3\x11\x3\x11"+
		"\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11"+
		"\x3\x11\x5\x11\x126\n\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3\x11\x3"+
		"\x11\x3\x11\x3\x11\x3\x11\x3\x11\a\x11\x13D\n\x11\f\x11\xE\x11\x140\v"+
		"\x11\x3\x12\x3\x12\x3\x12\x3\x12\x5\x12\x146\n\x12\x3\x12\x2\x2\x3 \x13"+
		"\x2\x2\x4\x2\x6\x2\b\x2\n\x2\f\x2\xE\x2\x10\x2\x12\x2\x14\x2\x16\x2\x18"+
		"\x2\x1A\x2\x1C\x2\x1E\x2 \x2\"\x2\x2\n\x4\x2;;=?\x4\x2\v\v\x33\x33\x5"+
		"\x2\x13\x13\x34\x35\x37\x37\x3\x2$%\x4\x2;;==\x3\x2&)\x3\x2\x1E#\x3\x2"+
		"+,\x178\x2%\x3\x2\x2\x2\x4\x36\x3\x2\x2\x2\x6\x38\x3\x2\x2\x2\b\x42\x3"+
		"\x2\x2\x2\nI\x3\x2\x2\x2\f\xE6\x3\x2\x2\x2\xE\xE8\x3\x2\x2\x2\x10\xEF"+
		"\x3\x2\x2\x2\x12\xF6\x3\x2\x2\x2\x14\xF8\x3\x2\x2\x2\x16\xFD\x3\x2\x2"+
		"\x2\x18\x109\x3\x2\x2\x2\x1A\x112\x3\x2\x2\x2\x1C\x114\x3\x2\x2\x2\x1E"+
		"\x116\x3\x2\x2\x2 \x125\x3\x2\x2\x2\"\x145\x3\x2\x2\x2$&\x5\x4\x3\x2%"+
		"$\x3\x2\x2\x2&\'\x3\x2\x2\x2\'%\x3\x2\x2\x2\'(\x3\x2\x2\x2()\x3\x2\x2"+
		"\x2)*\a\x2\x2\x3*\x3\x3\x2\x2\x2+-\x5\x1A\xE\x2,+\x3\x2\x2\x2,-\x3\x2"+
		"\x2\x2-/\x3\x2\x2\x2.\x30\x5\x6\x4\x2/.\x3\x2\x2\x2/\x30\x3\x2\x2\x2\x30"+
		"\x31\x3\x2\x2\x2\x31\x37\a:\x2\x2\x32\x33\x5\x1A\xE\x2\x33\x34\a\x33\x2"+
		"\x2\x34\x35\a:\x2\x2\x35\x37\x3\x2\x2\x2\x36,\x3\x2\x2\x2\x36\x32\x3\x2"+
		"\x2\x2\x37\x5\x3\x2\x2\x2\x38?\x5\f\a\x2\x39;\a\x33\x2\x2:<\x5\f\a\x2"+
		";:\x3\x2\x2\x2;<\x3\x2\x2\x2<>\x3\x2\x2\x2=\x39\x3\x2\x2\x2>\x41\x3\x2"+
		"\x2\x2?=\x3\x2\x2\x2?@\x3\x2\x2\x2@\a\x3\x2\x2\x2\x41?\x3\x2\x2\x2\x42"+
		"\x43\t\x2\x2\x2\x43\t\x3\x2\x2\x2\x44\x45\x5\b\x5\x2\x45\x46\a\x13\x2"+
		"\x2\x46G\x5\b\x5\x2GJ\x3\x2\x2\x2HJ\x5\b\x5\x2I\x44\x3\x2\x2\x2IH\x3\x2"+
		"\x2\x2J\v\x3\x2\x2\x2KL\a\x6\x2\x2LM\a=\x2\x2M\xE7\x5\x16\f\x2NO\a\x5"+
		"\x2\x2O\xE7\x5\x18\r\x2PQ\a\x4\x2\x2Q\xE7\x5\x18\r\x2RS\a\x3\x2\x2S\xE7"+
		"\x5\x18\r\x2TX\x5\xE\b\x2UW\x5\x4\x3\x2VU\x3\x2\x2\x2WZ\x3\x2\x2\x2XV"+
		"\x3\x2\x2\x2XY\x3\x2\x2\x2Y\\\x3\x2\x2\x2ZX\x3\x2\x2\x2[]\a>\x2\x2\\["+
		"\x3\x2\x2\x2\\]\x3\x2\x2\x2]^\x3\x2\x2\x2^`\x5\x12\n\x2_\x61\a=\x2\x2"+
		"`_\x3\x2\x2\x2`\x61\x3\x2\x2\x2\x61\xE7\x3\x2\x2\x2\x62\x66\x5\x10\t\x2"+
		"\x63\x65\x5\x4\x3\x2\x64\x63\x3\x2\x2\x2\x65h\x3\x2\x2\x2\x66\x64\x3\x2"+
		"\x2\x2\x66g\x3\x2\x2\x2gj\x3\x2\x2\x2h\x66\x3\x2\x2\x2ik\a>\x2\x2ji\x3"+
		"\x2\x2\x2jk\x3\x2\x2\x2kl\x3\x2\x2\x2ln\x5\x12\n\x2mo\a=\x2\x2nm\x3\x2"+
		"\x2\x2no\x3\x2\x2\x2o\xE7\x3\x2\x2\x2pq\a\x11\x2\x2qr\a=\x2\x2rs\a\x1E"+
		"\x2\x2st\x5 \x11\x2tu\a\x13\x2\x2ux\x5 \x11\x2vw\a\x15\x2\x2wy\x5\"\x12"+
		"\x2xv\x3\x2\x2\x2xy\x3\x2\x2\x2yz\x3\x2\x2\x2z~\a:\x2\x2{}\x5\x4\x3\x2"+
		"|{\x3\x2\x2\x2}\x80\x3\x2\x2\x2~|\x3\x2\x2\x2~\x7F\x3\x2\x2\x2\x7F\x82"+
		"\x3\x2\x2\x2\x80~\x3\x2\x2\x2\x81\x83\x5\x1A\xE\x2\x82\x81\x3\x2\x2\x2"+
		"\x82\x83\x3\x2\x2\x2\x83\x84\x3\x2\x2\x2\x84\x86\x5\x1C\xF\x2\x85\x87"+
		"\a=\x2\x2\x86\x85\x3\x2\x2\x2\x86\x87\x3\x2\x2\x2\x87\xE7\x3\x2\x2\x2"+
		"\x88\x89\a\x11\x2\x2\x89\x8A\a=\x2\x2\x8A\x8B\a\x1E\x2\x2\x8B\x8C\x5 "+
		"\x11\x2\x8C\x8D\a\x13\x2\x2\x8D\x8E\x5 \x11\x2\x8E\x8F\a\x33\x2\x2\x8F"+
		"\x90\x5\x6\x4\x2\x90\xE7\x3\x2\x2\x2\x91\x92\a\x16\x2\x2\x92\x93\a=\x2"+
		"\x2\x93\x94\a\x33\x2\x2\x94\xE7\x5\x6\x4\x2\x95\x96\a\x16\x2\x2\x96\x97"+
		"\a=\x2\x2\x97\x9B\a:\x2\x2\x98\x9A\x5\x4\x3\x2\x99\x98\x3\x2\x2\x2\x9A"+
		"\x9D\x3\x2\x2\x2\x9B\x99\x3\x2\x2\x2\x9B\x9C\x3\x2\x2\x2\x9C\x9F\x3\x2"+
		"\x2\x2\x9D\x9B\x3\x2\x2\x2\x9E\xA0\a>\x2\x2\x9F\x9E\x3\x2\x2\x2\x9F\xA0"+
		"\x3\x2\x2\x2\xA0\xA1\x3\x2\x2\x2\xA1\xA3\a\x19\x2\x2\xA2\xA4\a=\x2\x2"+
		"\xA3\xA2\x3\x2\x2\x2\xA3\xA4\x3\x2\x2\x2\xA4\xE7\x3\x2\x2\x2\xA5\xA6\a"+
		"\t\x2\x2\xA6\xA7\x5 \x11\x2\xA7\xA8\t\x3\x2\x2\xA8\xAD\x5\x6\x4\x2\xA9"+
		"\xAA\a\x33\x2\x2\xAA\xAB\a\n\x2\x2\xAB\xAC\a\x33\x2\x2\xAC\xAE\x5\x6\x4"+
		"\x2\xAD\xA9\x3\x2\x2\x2\xAD\xAE\x3\x2\x2\x2\xAE\xE7\x3\x2\x2\x2\xAF\xB0"+
		"\a\t\x2\x2\xB0\xB2\x5 \x11\x2\xB1\xB3\a\v\x2\x2\xB2\xB1\x3\x2\x2\x2\xB2"+
		"\xB3\x3\x2\x2\x2\xB3\xB4\x3\x2\x2\x2\xB4\xB6\a:\x2\x2\xB5\xB7\x5\x4\x3"+
		"\x2\xB6\xB5\x3\x2\x2\x2\xB7\xB8\x3\x2\x2\x2\xB8\xB6\x3\x2\x2\x2\xB8\xB9"+
		"\x3\x2\x2\x2\xB9\xC3\x3\x2\x2\x2\xBA\xBC\a>\x2\x2\xBB\xBA\x3\x2\x2\x2"+
		"\xBB\xBC\x3\x2\x2\x2\xBC\xBD\x3\x2\x2\x2\xBD\xBF\a\n\x2\x2\xBE\xC0\x5"+
		"\x4\x3\x2\xBF\xBE\x3\x2\x2\x2\xC0\xC1\x3\x2\x2\x2\xC1\xBF\x3\x2\x2\x2"+
		"\xC1\xC2\x3\x2\x2\x2\xC2\xC4\x3\x2\x2\x2\xC3\xBB\x3\x2\x2\x2\xC3\xC4\x3"+
		"\x2\x2\x2\xC4\xC6\x3\x2\x2\x2\xC5\xC7\a>\x2\x2\xC6\xC5\x3\x2\x2\x2\xC6"+
		"\xC7\x3\x2\x2\x2\xC7\xC8\x3\x2\x2\x2\xC8\xC9\a\f\x2\x2\xC9\xE7\x3\x2\x2"+
		"\x2\xCA\xCB\a\r\x2\x2\xCB\xCC\x5\b\x5\x2\xCC\xD0\a:\x2\x2\xCD\xCF\x5\x4"+
		"\x3\x2\xCE\xCD\x3\x2\x2\x2\xCF\xD2\x3\x2\x2\x2\xD0\xCE\x3\x2\x2\x2\xD0"+
		"\xD1\x3\x2\x2\x2\xD1\xD4\x3\x2\x2\x2\xD2\xD0\x3\x2\x2\x2\xD3\xD5\a>\x2"+
		"\x2\xD4\xD3\x3\x2\x2\x2\xD4\xD5\x3\x2\x2\x2\xD5\xD6\x3\x2\x2\x2\xD6\xD7"+
		"\a\xE\x2\x2\xD7\xE7\x3\x2\x2\x2\xD8\xD9\a\x10\x2\x2\xD9\xDA\x5\b\x5\x2"+
		"\xDA\xDB\a\x1E\x2\x2\xDB\xDC\x5\n\x6\x2\xDC\xE7\x3\x2\x2\x2\xDD\xDE\a"+
		"\x12\x2\x2\xDE\xE7\a=\x2\x2\xDF\xE0\a\x17\x2\x2\xE0\xE7\a=\x2\x2\xE1\xE2"+
		"\x5\x14\v\x2\xE2\xE3\a\x1E\x2\x2\xE3\xE4\x5 \x11\x2\xE4\xE7\x3\x2\x2\x2"+
		"\xE5\xE7\x5\x14\v\x2\xE6K\x3\x2\x2\x2\xE6N\x3\x2\x2\x2\xE6P\x3\x2\x2\x2"+
		"\xE6R\x3\x2\x2\x2\xE6T\x3\x2\x2\x2\xE6\x62\x3\x2\x2\x2\xE6p\x3\x2\x2\x2"+
		"\xE6\x88\x3\x2\x2\x2\xE6\x91\x3\x2\x2\x2\xE6\x95\x3\x2\x2\x2\xE6\xA5\x3"+
		"\x2\x2\x2\xE6\xAF\x3\x2\x2\x2\xE6\xCA\x3\x2\x2\x2\xE6\xD8\x3\x2\x2\x2"+
		"\xE6\xDD\x3\x2\x2\x2\xE6\xDF\x3\x2\x2\x2\xE6\xE1\x3\x2\x2\x2\xE6\xE5\x3"+
		"\x2\x2\x2\xE7\r\x3\x2\x2\x2\xE8\xE9\a\a\x2\x2\xE9\xEB\x5\x14\v\x2\xEA"+
		"\xEC\x5\x16\f\x2\xEB\xEA\x3\x2\x2\x2\xEB\xEC\x3\x2\x2\x2\xEC\xED\x3\x2"+
		"\x2\x2\xED\xEE\a:\x2\x2\xEE\xF\x3\x2\x2\x2\xEF\xF0\a\b\x2\x2\xF0\xF2\x5"+
		"\x14\v\x2\xF1\xF3\x5\x16\f\x2\xF2\xF1\x3\x2\x2\x2\xF2\xF3\x3\x2\x2\x2"+
		"\xF3\xF4\x3\x2\x2\x2\xF4\xF5\a:\x2\x2\xF5\x11\x3\x2\x2\x2\xF6\xF7\a\xF"+
		"\x2\x2\xF7\x13\x3\x2\x2\x2\xF8\xFB\a=\x2\x2\xF9\xFC\x5\x16\f\x2\xFA\xFC"+
		"\x5\x18\r\x2\xFB\xF9\x3\x2\x2\x2\xFB\xFA\x3\x2\x2\x2\xFB\xFC\x3\x2\x2"+
		"\x2\xFC\x15\x3\x2\x2\x2\xFD\xFE\a\x1A\x2\x2\xFE\x104\x5 \x11\x2\xFF\x100"+
		"\x5\x1E\x10\x2\x100\x101\x5 \x11\x2\x101\x103\x3\x2\x2\x2\x102\xFF\x3"+
		"\x2\x2\x2\x103\x106\x3\x2\x2\x2\x104\x102\x3\x2\x2\x2\x104\x105\x3\x2"+
		"\x2\x2\x105\x107\x3\x2\x2\x2\x106\x104\x3\x2\x2\x2\x107\x108\a\x1B\x2"+
		"\x2\x108\x17\x3\x2\x2\x2\x109\x10F\x5 \x11\x2\x10A\x10B\x5\x1E\x10\x2"+
		"\x10B\x10C\x5 \x11\x2\x10C\x10E\x3\x2\x2\x2\x10D\x10A\x3\x2\x2\x2\x10E"+
		"\x111\x3\x2\x2\x2\x10F\x10D\x3\x2\x2\x2\x10F\x110\x3\x2\x2\x2\x110\x19"+
		"\x3\x2\x2\x2\x111\x10F\x3\x2\x2\x2\x112\x113\a>\x2\x2\x113\x1B\x3\x2\x2"+
		"\x2\x114\x115\a\x14\x2\x2\x115\x1D\x3\x2\x2\x2\x116\x117\t\x4\x2\x2\x117"+
		"\x1F\x3\x2\x2\x2\x118\x119\b\x11\x1\x2\x119\x11A\a\x1A\x2\x2\x11A\x11B"+
		"\x5 \x11\x2\x11B\x11C\a\x1B\x2\x2\x11C\x126\x3\x2\x2\x2\x11D\x11E\t\x5"+
		"\x2\x2\x11E\x126\x5 \x11\r\x11F\x120\t\x6\x2\x2\x120\x121\a\x30\x2\x2"+
		"\x121\x126\x5 \x11\v\x122\x123\a.\x2\x2\x123\x126\x5 \x11\x6\x124\x126"+
		"\x5\"\x12\x2\x125\x118\x3\x2\x2\x2\x125\x11D\x3\x2\x2\x2\x125\x11F\x3"+
		"\x2\x2\x2\x125\x122\x3\x2\x2\x2\x125\x124\x3\x2\x2\x2\x126\x13E\x3\x2"+
		"\x2\x2\x127\x128\f\f\x2\x2\x128\x129\a\x31\x2\x2\x129\x13D\x5 \x11\r\x12A"+
		"\x12B\f\n\x2\x2\x12B\x12C\a-\x2\x2\x12C\x13D\x5 \x11\n\x12D\x12E\f\t\x2"+
		"\x2\x12E\x12F\t\a\x2\x2\x12F\x13D\x5 \x11\n\x130\x131\f\b\x2\x2\x131\x132"+
		"\t\x5\x2\x2\x132\x13D\x5 \x11\t\x133\x134\f\a\x2\x2\x134\x135\t\b\x2\x2"+
		"\x135\x13D\x5 \x11\b\x136\x137\f\x5\x2\x2\x137\x138\a*\x2\x2\x138\x13D"+
		"\x5 \x11\x6\x139\x13A\f\x4\x2\x2\x13A\x13B\t\t\x2\x2\x13B\x13D\x5 \x11"+
		"\x5\x13C\x127\x3\x2\x2\x2\x13C\x12A\x3\x2\x2\x2\x13C\x12D\x3\x2\x2\x2"+
		"\x13C\x130\x3\x2\x2\x2\x13C\x133\x3\x2\x2\x2\x13C\x136\x3\x2\x2\x2\x13C"+
		"\x139\x3\x2\x2\x2\x13D\x140\x3\x2\x2\x2\x13E\x13C\x3\x2\x2\x2\x13E\x13F"+
		"\x3\x2\x2\x2\x13F!\x3\x2\x2\x2\x140\x13E\x3\x2\x2\x2\x141\x146\a>\x2\x2"+
		"\x142\x146\a;\x2\x2\x143\x146\a?\x2\x2\x144\x146\x5\x14\v\x2\x145\x141"+
		"\x3\x2\x2\x2\x145\x142\x3\x2\x2\x2\x145\x143\x3\x2\x2\x2\x145\x144\x3"+
		"\x2\x2\x2\x146#\x3\x2\x2\x2)\',/\x36;?IX\\`\x66jnx~\x82\x86\x9B\x9F\xA3"+
		"\xAD\xB2\xB8\xBB\xC1\xC3\xC6\xD0\xD4\xE6\xEB\xF2\xFB\x104\x10F\x125\x13C"+
		"\x13E\x145";
	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN.ToCharArray());
}
